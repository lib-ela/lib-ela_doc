.. _th_hyperelastic_derivation:

Hyperelasticity Theory & Derivation
=====================================

.. contents::
   :local:
   :depth: 1

Motivation
----------

Hyperelastic models describe **rate-independent, fully reversible**
large-strain behaviour typical of rubber, soft tissues, and many polymers.
Instead of postulating a differential stress–strain law, we define a
*strain-energy density* :math:`W` and obtain all stress measures by
differentiation.  This guarantees thermodynamic consistency and makes tangent
operators straightforward to compute for finite-element codes.

Kinematics
----------

Let :math:`\mathbf X` be the reference configuration and
:math:`\mathbf x=\boldsymbol\chi(\mathbf X)` the deformed placement.  The
**deformation gradient**

.. math::
   \mathbf F = \frac{\partial \mathbf x}{\partial \mathbf X}
               \,, \qquad
   J = \det \mathbf F > 0

splits multiplicatively into a **volumetric** part :math:`J^{1/3}` and an
**isochoric** (volume-preserving) part:

.. math::
   \mathbf F = J^{1/3} \, \bar{\mathbf F},
   \quad\text{with}\quad
   \det \bar{\mathbf F} = 1 .

Strain-energy density
---------------------

Most hyperelastic models assume an additive split

.. math::
   W(\mathbf F) = W_\text{vol}(J) + W_\text{iso}(\bar{\mathbf C}),

where :math:`\bar{\mathbf C} = \bar{\mathbf F}^\mathrm T \bar{\mathbf F}`.
The **volumetric term** enforces compressibility (bulk modulus
:math:`K`), while :math:`W_\text{iso}` determines the shear behaviour.

Stress measures
---------------

* Second PK stress:

  .. math::
     \mathbf S = 2 \frac{\partial W}{\partial \mathbf C}
               = 2 \frac{\partial W_\text{iso}}{\partial \bar{\mathbf C}}
                 : \frac{\partial \bar{\mathbf C}}{\partial \mathbf C}
                 + p\,J\,\mathbf C^{-1},

  with the volumetric pressure

  .. math::
     p = J \frac{\mathrm d W_\text{vol}}{\mathrm d J} .

* Cauchy stress (push-forward of :math:`\mathbf S`):

  .. math::
     \boldsymbol\sigma = \frac{1}{J}\,\mathbf F \mathbf S \mathbf F^\mathrm T .

Nearly incompressible formulation
---------------------------------

Taking :math:`K \gg \mu` yields a “**nearly incompressible**” material.
In practice it is convenient to treat :math:`p` as an *independent* field
(**mixed F-p formulation**).  In *lib-ela* you can obtain this by mixing any
energy model with :class:`libela.hyperelastic.NearlyIncompressibleMixin`.

Consistent (algorithmic) tangent
--------------------------------

For Newton–Raphson schemes in FEM we need the fourth-order spatial tangent

.. math::
   \mathbb C = \frac{\partial\boldsymbol\sigma}{\partial\boldsymbol\varepsilon}
             = 2 \frac{\partial^2 W}{\partial \mathbf C \partial \mathbf C}
               : \mathbf F^{-1} \otimes \mathbf F^{-1} .

A full symbolic derivation and ready-to-use NumPy kernel are generated by

.. code-block:: python

   C_alg = mat.alg_tangent(symbolic=False)   # 3×3×3×3 array

FE implementation tips
----------------------

* Use **mixed displacement/pressure elements** (e.g. P2/P1) for nearly-
  incompressible materials to avoid volumetric locking.
* In *small-compression* problems, a reduced selective integration rule is
  sufficient, but watch out for hour-glassing.

Further reading
---------------

* R. W. Ogden, *Non-Linear Elastic Deformations*, Dover 1997.  
* P. Steinmann, “Formulations … nonlinear solid mechanics”, *Encycl. Comp.
  Mechanics* (2017). DOI: `10.1002/9781119176817`.

----

.. hint::

   Jump back to the :doc:`User-guide overview
   <../../user_guide/hyperelastic/overview>` for practical code examples,
   or see the :doc:`material models list <../material_models>` for closed-form
   expressions of :math:`W`.
